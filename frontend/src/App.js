import React from "react";
import { useState, useEffect } from "react";
import './App.css';
import { Octokit } from "octokit";
import ArtistCard from "./components/artistCard";
const CryptoJS = require('crypto-js');
const Papa = require('papaparse');

function encrypt(text, keyHex, ivHex) {
    const key = CryptoJS.enc.Hex.parse(keyHex);
    const iv = CryptoJS.enc.Hex.parse(ivHex);
    const encrypted = CryptoJS.AES.encrypt(text, key, { iv: iv });
    return encrypted.ciphertext.toString(CryptoJS.enc.Hex);
}

function decrypt(encryptedText, keyHex, ivHex) {
  const key = CryptoJS.enc.Hex.parse(keyHex);
  const iv = CryptoJS.enc.Hex.parse(ivHex);
  const encryptedTextBytes = CryptoJS.enc.Hex.parse(encryptedText);
  
  const decrypted = CryptoJS.AES.decrypt(
      { ciphertext: encryptedTextBytes },
      key,
      { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }
  );
  
  return decrypted.toString(CryptoJS.enc.Utf8);
}

const keyHex = '01eda8f0bcae94a569139c6126dd5d2929863500de660b3f6414d0b4c9cc3770'; // 256-bit 
const ivHex = 'b22ec2381daab4d862d5c76ab07c00d8'; // 128-bit 

async function get_secret(){
  let apiKey = "E78j6jYcHFMz6miZXvmdoVdbW5ywhB9JunEfD980pK0="
  let encryptedAPIKey = encrypt(apiKey, keyHex, ivHex)
  const myHeaders = new Headers();
  myHeaders.append("Authorization", `Bearer ${encryptedAPIKey}`);

  const requestOptions = {
    mode: 'cors',
    method: "GET",
    headers: myHeaders,
    redirect: "follow"
  };
  
  let data = await fetch("https://way-out-west-app-backend.vercel.app/protected", requestOptions)
  .then(response => response.json())
  .then(data => {return data;})
  .catch(error => console.error(error));
  return data;
}

async function test(){
  const secretKey = await get_secret();
  let key = secretKey['key'];
  
  const octokit = new Octokit({ 
    auth: decrypt(key, keyHex, ivHex)
  });
  const sha = await octokit.request('GET /repos/{owner}/{repo}/contents/{path}', {
    owner: 'sebastian-axell',
    repo: 'way_out_west',
    path: 'data.csv',
    headers: {
      'X-GitHub-Api-Version': '2022-11-28'
    }
  }).then(response => {
    return response['data']['sha'];
  })
  const csv_data = await octokit.request('GET /repos/{owner}/{repo}/git/blobs/{file_sha}', {
    owner: 'sebastian-axell',
    repo: 'way_out_west',
    file_sha: sha,
    headers: {
      'X-GitHub-Api-Version': '2022-11-28'
    }
  }).then(response=> {
    return response['data'];
  });
  const decodedString = atob(csv_data['content']);
      const lines = decodedString.split("\n");
      const dataArray = lines.map(line => {
        const decodedLine = decodeURIComponent(escape(line.trim())); 
        return decodedLine;
      }).join('\n')
      const parsedData = Papa.parse(dataArray.trim(), { header: true }).data;
      console.log(parsedData);
      return parsedData;
}

async function uploadCSV(base64Content){
  const secretKey = await get_secret();
  let key = secretKey['key'];
  
  const octokit = new Octokit({ 
    auth: decrypt(key, keyHex, ivHex)
  });

  await octokit.request('PUT /repos/{owner}/{repo}/contents/{path}', {
    owner: 'OWNER',
    repo: 'REPO',
    path: 'PATH',
    message: 'a new commit message',
    committer: {
      name: 'Monalisa Octocat',
      email: 'octocat@github.com'
    },
    content: 'bXkgdXBkYXRlZCBmaWxlIGNvbnRlbnRz',
    sha: '95b966ae1c166bd92f8ae7d1c313e738c731dfc3',
    headers: {
      'X-GitHub-Api-Version': '2022-11-28'
    }
  })
}

function updateCSVData(data){
  const csvString = Papa.unparse(data);
  const base64Content = btoa(encodeURIComponent(csvString));

}

function App() {
  const [data, setData] = useState(true);
  const [selectedDay, setSelectedDay] = useState("thursday")

  const getData = async () =>{
    await test().then(response=>{
      setData(response)
    })
  }

  const updateData = (index, keenData) => {
    setData(prevItems => {
      const updatedItems = [...prevItems]; // Create a copy of the current array
      updatedItems[index]['keen'] = keenData; // Update the desired index with the new value
      return updatedItems; // Set the updated array back to the state
    });
    updateCSVData(data);
  }

  useEffect(() => {
    getData()
  }, []);
  
  return (
    <div class="bg-pink-200 h-screen overflow-y-auto w-full">
      <div className="h-16 lg:h-20 absolute z-10 bg-teal-700 w-full" id="header">
        <div className="mx-auto w-fit h-full">
          <svg
              xmlns="http://www.w3.org/2000/svg"
              version="1.1"
              viewBox="0 0 100 86.93"
              className="h-full"
            >
              <defs>
                <path d="M330.926 98.995H429.921V130.108H330.926z"></path>
              </defs>
              <g transform="translate(6.877 -198.608)">
                <path
                  fill="#ffdab9"
                  fillOpacity="1"
                  stroke="none"
                  strokeDasharray="none"
                  strokeLinecap="round"
                  strokeWidth="1.323"
                  d="M1.344 239.742l6.615 1.456M5.727 226.74l6.081 5.939-1.144 2.044-5.385-1.328 3.965 3.863-1.144 2.044-8.242-2.082 1.08-1.929 5.547 1.66-4.192-4.079 1.032-1.842 5.632 1.506-4.283-3.915zm12.438-1.222l-4.095 4.298-5.943-5.66 4.095-4.3 1.15 1.096-2.643 2.773 1.026.978 2.452-2.575 1.15 1.095-2.453 2.575 1.469 1.399 2.642-2.774zm9.452-10.969q.945 1.72.517 3.276-.431 1.551-2.17 2.507-1.735.953-3.275.485-1.543-.473-2.488-2.193-.953-1.734-.52-3.28.431-1.552 2.166-2.505 1.73-.95 3.274-.484 1.543.46 2.496 2.194zm-1.459 3.173q.09-.477-.023-.993-.117-.521-.449-1.125-.355-.648-.755-1.02-.399-.371-.794-.519-.406-.154-.801-.107-.39.045-.739.236-.352.194-.597.492-.24.296-.342.729-.093.403.015.966.11.556.456 1.184.353.642.747 1.017.397.367.795.52.398.152.796.109t.756-.24q.357-.195.606-.509.247-.318.33-.74zm11.116-4.916q.408 1.466-.267 2.495-.675 1.028-2.412 1.511-1.736.483-2.846-.05-1.104-.533-1.51-1.994l-1.404-5.05 2.05-.57 1.371 4.933q.23.823.687 1.131.457.308 1.233.092.764-.213 1.007-.698.248-.486.01-1.341l-1.372-4.934 2.05-.57zm8.79-4.381l-2.559.156.402 6.607-2.112.13-.403-6.609-2.558.156-.097-1.584 7.23-.44zm18.814 2.333l-4.487 7.22-2.243-.677.136-5.544-2.917 4.705-2.243-.677.255-8.496 2.116.638-.423 5.774 3.078-4.973 2.02.61-.254 5.825 2.899-5.027zm3.858 11.916l-5.065-3.095 4.279-7.003 5.066 3.095-.828 1.354-3.27-1.997-.738 1.209 3.034 1.854-.828 1.354-3.033-1.853-1.058 1.73 3.27 1.998zm7.994 3.666q-.824.89-2.097.747-1.266-.142-2.56-1.34-.749-.693-1.187-1.34-.43-.646-.729-1.297l1.337-1.444.17.157q.126.83.53 1.587.407.76.957 1.27.142.13.395.32.253.189.45.267.246.092.46.088.219-.001.417-.215.184-.199.145-.498-.03-.299-.283-.675-.265-.396-.582-.816-.309-.421-.54-.838-.531-.95-.478-1.682.062-.732.642-1.359.78-.841 2.022-.674 1.25.166 2.436 1.263.595.55 1.065 1.203.477.653.74 1.22l-1.284 1.387-.165-.153q-.095-.628-.445-1.313-.342-.685-.892-1.194-.195-.18-.415-.331-.213-.152-.458-.244-.214-.086-.443-.065-.226.017-.372.174-.22.239-.159.537.066.294.475.867.268.376.511.721.248.35.495.789.482.867.446 1.562-.028.696-.604 1.319zm8.289 4.358l-1.504-2.075-5.36 3.886-1.243-1.714 5.36-3.886-1.504-2.075 1.285-.932 4.251 5.864zm-.942 15.248l-.455.465-2.45 2.492a1461.998 1461.998 0 01-2.106 2.133c-.047.046-.074.075-.09.091l.035-.029.377-.13s.07.125.1.175a.661.661 0 00-.55.018l-.02.023a.308.308 0 00-.026.03l-.045.064.58 1.011.379-.132.035-.03c.013-.011.019-.015.023-.02.01-.008.013-.014.02-.02.026-.027.065-.064.12-.118l.49-.494 1.62-1.645 1.413-1.435-.006 2.146-2.35 2.389a1461.998 1461.998 0 01-2.106 2.133l-.09.092.036-.028.377-.132.101.175a.661.661 0 00-.55.018l-.022.023a.308.308 0 00-.025.03l-.045.064.58 1.012.379-.133.035-.03c.013-.01.019-.014.023-.019l.02-.02.119-.116.49-.497c.424-.43 1.018-1.031 1.621-1.644.69-.7.926-.94 1.4-1.424l-.005 2.147-2.338 2.377c-.603.612-1.196 1.214-1.62 1.642-.211.214-.38.387-.486.492a14.31 14.31 0 01-.09.09l.036-.027.377-.133.101.176a.661.661 0 00-.55.017l-.022.024a.308.308 0 00-.025.029l-.045.064.58 1.012.379-.133.035-.029c.013-.011.019-.015.023-.02.01-.008.013-.013.02-.019l.119-.117.49-.496 1.621-1.645c.685-.695.916-.93 1.39-1.414l-.005 2.149-2.328 2.365c-.603.612-1.196 1.216-1.62 1.644a160.487 160.487 0 01-.575.58l.035-.027.295-.103a.661.661 0 00-.368.166c-.007.007-.012.01-.021.021a.308.308 0 00-.025.03l-.045.064.58 1.012.379-.131.035-.03.023-.021.02-.02c.026-.025.065-.062.119-.117l.49-.494 1.621-1.646 1.38-1.403-.005 1.537-2.318 2.356c-.603.612-1.196 1.216-1.62 1.644-.211.215-.38.385-.486.49l-.09.092.036-.029.377-.13s.07.125.1.175a.661.661 0 00-.55.018l-.021.023c-.005.005-.01.008-.026.027-.008.01-.044.067-.044.067l.58 1.011.379-.132.035-.03.023-.02c.01-.008.013-.014.02-.02l.119-.118.49-.494 1.621-1.645 1.37-1.392-.018 6.617a.661.661 0 00.658.664.661.661 0 00.664-.66l.017-6.592 1.198 1.14 1.02.97 1.544 1.517a.661.661 0 00.936-.01.661.661 0 00-.01-.935l-1.551-1.524-1.025-.976-2.106-2.004.004-1.588 1.188 1.13 1.02.971 1.544 1.516a.661.661 0 00.936-.008.661.661 0 00-.01-.936l-1.551-1.523-1.026-.977-2.097-1.996.008-2.195 1.175 1.121 1.02.97 1.545 1.516a.661.661 0 00.935-.008.661.661 0 00-.01-.935l-1.55-1.524-1.026-.976-2.086-1.986.006-2.196 1.166 1.112 1.02.97 1.545 1.516a.661.661 0 00.935-.008.661.661 0 00-.01-.936l-1.55-1.523-1.026-.979-2.074-1.974.006-2.194 1.154 1.1 1.02.969 1.545 1.517a.661.661 0 00.935-.01.661.661 0 00-.01-.935l-1.55-1.524-1.026-.976-2.133-2.03a.661.661 0 00-.36-.343zm-4.115 6.023l.006.01-.045.063c-.014.018-.017.02-.02.023a.661.661 0 00.06-.096zm0 4.027l.006.01-.045.063c-.014.018-.017.02-.02.023a.661.661 0 00.06-.095zm.002 4.03l.004.008-.045.062c-.01.014-.013.015-.015.018a.661.661 0 00.056-.088zm0 4.027l.004.008-.045.065c-.014.018-.017.02-.02.023a.661.661 0 00.061-.096zm-.002 3.418l.006.01-.045.063c-.014.018-.017.02-.02.023a.661.661 0 00.06-.096zM7.37 251.928l-.459.469-2.09 2.135-1.38 1.41-.414.42c-.037.036-.056.057-.07.072a3.9 3.9 0 01.032-.027l.286-.1a.661.661 0 00-.36.164.636.636 0 00-.02.022l-.023.027-.045.064.58 1.012.381-.135.035-.029c.013-.011.018-.015.022-.02l.02-.017.019-.021.002-.002a.661.661 0 00.055-.106l.01.018-.045.062-.02.026c.021-.022.044-.042.08-.079.093-.093.237-.241.418-.425l1.383-1.41 1.033-1.055.012 1.549-1.99 2.033c-.515.525-1.02 1.043-1.381 1.41l-.414.42-.07.072a3.9 3.9 0 01.033-.027l.378-.133.102.178a.661.661 0 00-.555.02.636.636 0 00-.02.02l-.023.028-.045.065.58 1.011.381-.134.036-.028c.013-.011.017-.017.021-.021l.02-.018.02-.021.001-.002a.661.661 0 00.055-.106l.01.018-.045.062-.02.026c.021-.022.044-.042.08-.078l.418-.426 1.383-1.41 1.06-1.082.012 1.548-2.017 2.061c-.515.525-1.02 1.043-1.381 1.41l-.414.42-.07.072a3.9 3.9 0 01.033-.027l.379-.133.101.178a.661.661 0 00-.555.02.636.636 0 00-.02.021l-.023.027-.044.067.58 1.01.38-.133.036-.03.021-.02c.009-.007.014-.013.02-.019l.02-.021.001-.002a.661.661 0 00.055-.106l.01.018-.045.064-.02.024.08-.078.418-.424 1.383-1.412 1.086-1.11.012 1.55c-.046.046-1.037 1.062-2.043 2.089a1251.259 1251.259 0 01-1.883 1.916c.002-.002.006-.003.018-.014a3.22 3.22 0 00.033-.029l.379-.133.101.178a.661.661 0 00-.555.02.636.636 0 00-.019.02l-.023.03-.045.065.58 1.01.38-.133.036-.03.021-.02c.009-.007.014-.013.02-.019l.02-.021.001-.002a.661.661 0 00.055-.106l.01.018-.045.064-.02.024.08-.078.418-.424c.362-.368.869-.887 1.383-1.412.547-.56.712-.725 1.113-1.135l.038 4.852a.661.661 0 00.667.656.661.661 0 00.657-.668l-.035-4.602.74.71.867.83 1.318 1.3a.661.661 0 00.936-.006.661.661 0 00-.008-.935l-1.324-1.307-.875-.838-1.67-1.6-.012-1.634.768.736.867.83 1.318 1.3a.661.661 0 00.936-.005.661.661 0 00-.008-.936l-1.324-1.306-.875-.838-1.697-1.627-.012-1.633.795.762.867.83 1.318 1.3a.661.661 0 00.936-.007.661.661 0 00-.008-.934l-1.324-1.309-.875-.837-1.725-1.65-.011-1.636.822.79.867.83 1.318 1.3a.661.661 0 00.936-.008.661.661 0 00-.008-.935l-1.324-1.307-.875-.838-1.904-1.824a.661.661 0 00-.153-.146zm19.098 39.793a.661.661 0 00-.66.662.661.661 0 00.66.66h8.314a.661.661 0 00.66-.66.661.661 0 00-.66-.662zm15.178 0a.661.661 0 00-.662.662.661.661 0 00.662.66h22.088a.661.661 0 00.662-.66.661.661 0 00-.662-.662zm-22.16-4.365a.661.661 0 00-.66.662.661.661 0 00.66.662h29.046a.661.661 0 00.663-.662.661.661 0 00-.663-.662zm34.46 0a.661.661 0 00-.662.662.661.661 0 00.662.662h16.77a.661.661 0 00.662-.662.661.661 0 00-.662-.662zm-39.306-4.363a.661.661 0 00-.662.66.661.661 0 00.662.662h2.742a.661.661 0 00.662-.662.661.661 0 00-.662-.66zm7.969 0a.661.661 0 00-.66.66.661.661 0 00.66.662h7.449a.661.661 0 00.662-.662.661.661 0 00-.662-.66zm14.312 0a.661.661 0 00-.66.66.661.661 0 00.66.662h18.72a.661.661 0 00.663-.662.661.661 0 00-.662-.66zm23.246 0a.661.661 0 00-.662.66.661.661 0 00.662.662h15.397a.661.661 0 00.66-.662.661.661 0 00-.66-.66zm-49.178-4.366a.661.661 0 00-.662.662.661.661 0 00.662.66h18.975a.661.661 0 00.662-.66.661.661 0 00-.662-.662zm24.202 0a.661.661 0 00-.66.662.661.661 0 00.66.66h12.091a.661.661 0 00.66-.66.661.661 0 00-.66-.662zm19.154 0a.661.661 0 00-.662.662.661.661 0 00.662.66h10.547a.661.661 0 00.662-.66.661.661 0 00-.662-.662zm19.129 0a.661.661 0 00-.662.662.661.661 0 00.662.66h5.738a.661.661 0 00.662-.66.661.661 0 00-.662-.662zm-65.27-4.365a.661.661 0 00-.662.662.661.661 0 00.662.662h8.559a.661.661 0 00.662-.662.661.661 0 00-.662-.662zm17.047 0a.661.661 0 00-.66.662.661.661 0 00.66.662h10.22a.661.661 0 00.663-.662.661.661 0 00-.662-.662zm16.09 0a.661.661 0 00-.66.662.661.661 0 00.66.662h8.467a.661.661 0 00.66-.662.661.661 0 00-.66-.662zm18.873 0a.661.661 0 00-.662.662.661.661 0 00.662.662H82a.661.661 0 00.66-.662.661.661 0 00-.66-.662zM6.075 269.9a.661.661 0 00-.662.66.661.661 0 00.662.662h78.051a.661.661 0 00.662-.662.661.661 0 00-.662-.66zm55.248-38.78a.661.661 0 00-.925.133l-4.127 5.502a.661.661 0 00.133.926.661.661 0 00.925-.133l4.125-5.502a.661.661 0 00-.13-.925zm3.883 4.59l-5.41 4.248a.661.661 0 00-.113.928.661.661 0 00.93.113l5.412-4.248a.661.661 0 00.11-.93.661.661 0 00-.929-.11zm3.998 5.543a.661.661 0 00-.506.006l-6.328 2.705a.661.661 0 00-.347.868.661.661 0 00.867.35l6.328-2.706a.661.661 0 00.348-.869.661.661 0 00-.362-.354zm1.428 6.268l-6.812.976a.661.661 0 00-.561.75.661.661 0 00.748.561l6.813-.977a.661.661 0 00.56-.748.661.661 0 00-.748-.562zM27.7 253.65l-6.812.977a.661.661 0 00-.56.748.661.661 0 00.747.56l6.813-.976a.661.661 0 00.56-.748.661.661 0 00-.748-.56zm36.344-.398a.661.661 0 00-.736.578.661.661 0 00.578.735l6.834.818a.661.661 0 00.736-.578.661.661 0 00-.578-.734zm-43.057-5.18a.661.661 0 00-.736.579.661.661 0 00.578.736l6.834.818a.661.661 0 00.737-.578.661.661 0 00-.579-.736zm1.793-6.302a.661.661 0 00-.859.367.661.661 0 00.37.86l6.388 2.556a.661.661 0 00.86-.367.661.661 0 00-.37-.86zm2.877-5.752a.661.661 0 00-.435.258.661.661 0 00.133.928l5.51 4.12a.661.661 0 00.925-.134.661.661 0 00-.135-.926l-5.507-4.121a.661.661 0 00-.49-.125zm4.272-4.549a.661.661 0 00-.111.93l4.252 5.404a.661.661 0 00.93.111.661.661 0 00.11-.93l-4.253-5.404a.661.661 0 00-.928-.11zm5.79-3.428a.661.661 0 00-.347.87l2.707 6.32a.661.661 0 00.87.348.661.661 0 00.347-.87l-2.707-6.32a.661.661 0 00-.87-.348zm6.483-1.812a.661.661 0 00-.56.748l.978 6.807a.661.661 0 00.748.56.661.661 0 00.56-.75l-.976-6.805a.661.661 0 00-.75-.56zm6.733-.074a.661.661 0 00-.737.578l-.818 6.826a.661.661 0 00.578.734.661.661 0 00.735-.578l.82-6.826a.661.661 0 00-.578-.734zm6.521 1.668a.661.661 0 00-.861.367l-2.559 6.38a.661.661 0 00.368.862.661.661 0 00.859-.367l2.56-6.383a.661.661 0 00-.367-.86zm-10.681 7.34c-7.597.628-13.987 6.573-14.957 14.498-.341 2.785-.156 5.275.808 7.76a.661.661 0 00.856.376.661.661 0 00.377-.855c-.879-2.264-1.05-4.484-.727-7.121 1.023-8.354 8.538-14.289 16.799-13.28 8.26 1.01 14.124 8.578 13.101 16.932a13.016 13.016 0 01-.76 3.168.661.661 0 00.395.85.661.661 0 00.848-.395c.428-1.17.672-2.173.83-3.46 1.109-9.058-5.276-17.31-14.254-18.407a16.27 16.27 0 00-3.316-.066zm.898 6.527l-.457.469s-7.267 7.443-14.31 14.646a8766.29 8766.29 0 01-9.461 9.664 1153.77 1153.77 0 01-2.848 2.897c-.311.314-.533.536-.64.642-.01.008-.011.01-.018.018a.661.661 0 00-.016 0l-.072.078c-.01.011-.02.02-.037.043-.01.011-.017.019-.047.068-.03.05.58 1.012.58 1.012s.36-.117.383-.135c.023-.017.03-.026.039-.033l.037-.033c.022-.02.046-.045.076-.074.122-.12.342-.34.654-.657.626-.632 1.615-1.637 2.852-2.898 2.474-2.522 5.94-6.064 9.463-9.666l2.515-2.574 6.727 6.379 4.355-4.487 4.729 4.487 6.889-7.092 1.986 1.904 5.965 5.719 9.037 8.932a.661.661 0 00.935-.006.661.661 0 00-.006-.936l-9.044-8.937-5.971-5.727-2.46-2.356zm.031 1.861l10.406 9.977-5.97 6.148-4.729-4.486-4.357 4.486-5.764-5.467c4.889-5.002 10.081-10.317 10.414-10.658zm-27.396 26.354l.06.105a.661.661 0 00-.404.014c.068-.03.344-.12.344-.12zM4.226 240.442a43.53 43.53 0 00-1.485 6.035l1.303.225a42.23 42.23 0 011.44-5.854zm78.386-7.738l-1.156.642a42.15 42.15 0 012.336 4.928l1.229-.488a43.462 43.462 0 00-2.409-5.082z"
                  opacity="1"
                ></path>
              </g>
            </svg>
        </div>
      </div>   
      <div className="flex justify-between">
        <div className="bg-teal-300 opacity-50 w-1/12 xl:w-[6rem] sm:max-w-xs content-center"></div>   
          <div className="">
            <div className="mt-24 md:mt-24 lg:mt-32 mb-5 md:mb-10 xl:mb-12 w-full flex justify-center">
              {/* sm:w-8/12 lg:w-5/12 xl:w-3/12 */}
              <div className="flex text-sm  md:text-2xl w-fit space-x-3 md:space-x-8 inline-flex items-center justify-around py-1 md:py-2 px-4 text-gray-500 rounded-lg">
                <button value={"thursday"} className={`transition-transform rounded-xl rounded transition ${ selectedDay == "thursday" ?  "bg-white border border-green-900" : "bg-pink-100"} px-2 md:px-6 py-1 hover:-translate-y-1`} onClick={()=>{setSelectedDay("thursday")}}>thursday</button>
                <button value={"friday"} className={`transition-transform rounded-xl rounded transition ${ selectedDay == "friday" ?  "bg-white border border-green-900" : "bg-pink-100"} px-2 md:px-6 py-1 hover:-translate-y-1`} onClick={()=>{setSelectedDay("friday");}}>friday</button>
                <button className={`transition-transform rounded-xl transition rounded ${ selectedDay == "saturday" ?  "bg-white border border-green-900" : "bg-pink-100"} px-2 md:px-6 py-1 hover:-translate-y-1`} value={"saturday"} onClick={()=>{setSelectedDay("saturday")}}>saturday</button>
              </div>
            </div>
          <div class="w-11/12 md:w-10/12 lg:w-10/12 xl:w-11/12 mx-auto">
            <div className="grid grid-cols-2 gap-x-4 xl:gap-x-24 xl:gap-y-24 sm:grid-cols-3 mb-16">
              {Object.keys(data).map((dataEntry, value) =>(
                data[value]['day'] == selectedDay && <ArtistCard key={value} index={value} updateData={updateData} data={data[value]}/>
              ))}
            </div>
          </div>
        </div>
        <div className="bg-teal-300 opacity-50 w-1/12 xl:w-[6rem] sm:max-w-xs content-center"></div>
      </div>
    </div>
  );
}


export default App;
